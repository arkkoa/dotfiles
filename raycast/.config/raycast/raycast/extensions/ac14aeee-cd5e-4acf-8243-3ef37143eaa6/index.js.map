{
  "version": 3,
  "sources": ["../node_modules/node-tesseract-ocr/src/index.js", "../src/index.tsx", "../src/ocr.ts", "../src/utils.ts", "../src/screenshot.ts"],
  "sourcesContent": ["const exec = require(\"child_process\").exec\nconst log = console.debug\n\n/**\n * @param input - URL, local image path or Buffer\n * @param config - any OCR options and control parameters\n * @returns default output format is text\n */\nfunction recognize(input, config = {}) {\n  const options = getOptions(config)\n  const binary = config.binary || \"tesseract\"\n  const isSingleLocalFile = typeof input === \"string\" && !input.match(/^https?:\\/\\//)\n  const inputOption = isSingleLocalFile ? `\"${input}\"` : \"stdin\"\n  const command = [binary, inputOption, \"stdout\", ...options].join(\" \")\n\n  if (config.debug) log(\"command\", command)\n\n  return new Promise((resolve, reject) => {\n    const child = exec(command, (error, stdout, stderr) => {\n      if (config.debug) log(stderr)\n      if (error) reject(error)\n      resolve(stdout)\n    })\n    if (inputOption === \"stdin\") pipeInput(input, child)\n  })\n}\n\nfunction pipeInput(input, child) {\n  if (typeof input === \"string\") {\n    const protocol = input.match(/^(.*?):/)[1]\n    return require(protocol).get(input, (response) => {\n      response.pipe(child.stdin)\n    })\n  }\n\n  if (Array.isArray(input)) input = Buffer.from(input.join(\"\\n\"), \"utf-8\")\n  child.stdin.write(input)\n  child.stdin.end()\n}\n\nfunction getOptions(config) {\n  const ocrOptions = [\"tessdata-dir\", \"user-words\", \"user-patterns\", \"psm\", \"oem\", \"dpi\"]\n\n  return Object.entries(config)\n    .map(([key, value]) => {\n      if ([\"debug\", \"presets\", \"binary\"].includes(key)) return\n      if (key === \"lang\") return `-l ${value}`\n      if (ocrOptions.includes(key)) return `--${key} ${value}`\n\n      return `-c ${key}=${value}`\n    })\n    .concat(config.presets) // options -l and --psm must occur before any CONFIGFILE\n    .filter(Boolean)\n}\n\nmodule.exports = {\n  recognize,\n}\n", "import { Clipboard, closeMainWindow, showToast, Toast } from \"@raycast/api\";\nimport tesseractOcr from \"./ocr\";\nimport utils from \"./utils\";\nimport takeScreenshot from \"./screenshot\";\n\nexport default async function main() {\n  const isTesseractInstalled = await utils.isTesseractInstalled();\n\n  if (!isTesseractInstalled) {\n    await showToast({\n      style: Toast.Style.Failure,\n      title: \"Tesseract not found, check README!\",\n      message: \"Tesseract path not found or it is not installed, check README for more info!\",\n    });\n    return;\n  }\n\n  await closeMainWindow();\n  const filePath = await takeScreenshot();\n\n  try {\n    let text = await tesseractOcr(filePath);\n    text = utils.handleNewLines(text);\n\n    if (!text) {\n      await showToast({\n        style: Toast.Style.Failure,\n        title: \"No text found on image!\",\n        message: \"No text found on image!\",\n      });\n      return;\n    }\n\n    await Clipboard.copy(text);\n    await showToast({\n      style: Toast.Style.Success,\n      title: \"Text copied to clipboard!\",\n      message: \"Text copied to clipboard!\",\n    });\n  } catch (e) {\n    await showToast({\n      style: Toast.Style.Failure,\n      title: \"Failed to OCR the image!\",\n      message: \"Failed to OCR the image!\",\n    });\n  }\n}\n", "import { recognize } from \"node-tesseract-ocr\";\nimport { getPreferenceValues } from \"@raycast/api\";\n\nexport default async function tesseractOcr(imagePath: string) {\n  const config = {\n    lang: getPreferenceValues<Preferences>().tesseract_lang,\n    oem: 1,\n    psm: 3,\n    binary: getPreferenceValues<Preferences>().tesseract_path,\n  };\n\n  return await recognize(imagePath, config);\n}\n", "import { getPreferenceValues } from \"@raycast/api\";\nimport fs from \"fs\";\n\nconst { private_key, client_email } = getPreferenceValues();\nfunction handleNewLines(text: string) {\n  const newLine = getPreferenceValues<Preferences>().newLine;\n\n  if (newLine === \"replaceSpace\") {\n    return text.replace(/\\n/g, \" \");\n  }\n  if (newLine === \"replaceBreak\") {\n    return text.replace(/\\n/g, \"<br>\");\n  }\n\n  return text;\n}\n\nconst isTesseractInstalled = async () => {\n  return fs.existsSync(getPreferenceValues<Preferences>().tesseract_path);\n};\n\nasync function checkGoogleCredentials() {\n  return !(!private_key || !client_email);\n}\n\nconst utils = {\n  handleNewLines,\n  isTesseractInstalled,\n  checkGoogleCredentials,\n};\nexport default utils;\n", "import { environment } from \"@raycast/api\";\nimport util from \"util\";\nimport { exec } from \"child_process\";\n\nconst execPromise = util.promisify(exec);\n\nconst filePath = environment.assetsPath + \"/\" + Date.now() + \".png\";\nconst command = \"/usr/sbin/screencapture -i \" + filePath;\nexport default async function takeScreenshot() {\n  await execPromise(command);\n  return filePath;\n}\n"],
  "mappings": "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",
  "names": ["require_src", "__commonJSMin", "exports", "module", "exec", "log", "recognize", "input", "config", "options", "getOptions", "binary", "inputOption", "command", "resolve", "reject", "child", "error", "stdout", "stderr", "pipeInput", "protocol", "response", "ocrOptions", "key", "value", "src_exports", "__export", "main", "__toCommonJS", "import_api", "import_node_tesseract_ocr", "import_api", "tesseractOcr", "imagePath", "config", "import_api", "import_fs", "private_key", "client_email", "handleNewLines", "text", "newLine", "isTesseractInstalled", "fs", "checkGoogleCredentials", "utils", "utils_default", "import_api", "import_util", "import_child_process", "execPromise", "util", "filePath", "command", "takeScreenshot", "main", "utils_default", "filePath", "takeScreenshot", "text", "tesseractOcr"]
}
